use core::arch::asm;

pub const PS2_DATA_PORT: u16 = 0x60;
pub const PS2_STATUS_PORT: u16 = 0x64;
pub const PS2_OUTPUT_BUFFER_STATUS_BIT: u8 = 1;

/// Reads from the PS2 data port if the PS2 status port is ready. Returns `Some(KeyScanCode)`
/// if the converted scancode is a supported character.
///
/// /// ### Example Usage:
/// ```
/// let mut v = Vga::new();
///
/// if let Some(c) = read_if_ready() == KeyScanCode::A {
///     v.write_char(b'a');
/// }
pub fn read_if_ready() -> Option<Key> {
    if !is_ps2_data_available() {
        return None;
    }

    let code = unsafe { read(PS2_DATA_PORT) };

    SCANCODE_TO_KEY[code as usize]
}

/// Returns `true` if the PS2 input buffer has data ready to be read,
/// meaning the least significant bit of the PS2 status port is set.
fn is_ps2_data_available() -> bool {
    status() & PS2_OUTPUT_BUFFER_STATUS_BIT != 0
}

/// Reads from `PS2_STATUS_PORT` and returns the extracted value.
fn status() -> u8 {
    let res: u8;

    unsafe {
        res = read(PS2_STATUS_PORT);
    }

    res
}

/// Reads from `port` and returns the extracted value.
/// ## SAFETY:
/// `port` is assumed to be one of `PS2_STATUS_PORT` or `PS2_DATA_PORT`. Passing another value
/// to this function will result in a panic.
///
unsafe fn read(port: u16) -> u8 {
    assert!(port == PS2_DATA_PORT || port == PS2_STATUS_PORT);

    let res: u8;

    asm!(
        "in al, dx",
        in("dx") port,
        out("al") res,
    );

    res
}

#[repr(u8)]
#[derive(Clone, Copy, PartialEq, PartialOrd)]
pub enum Key {
    Escape,
    Tab,
    Enter,
    ArrowUp,
    Backspace,
    ArrowDown,
    ArrowLeft,
    ArrowRight,
    A = b'a',
    B = b'b',
    C = b'c',
    D = b'd',
    E = b'e',
    F = b'f',
    G = b'g',
    H = b'h',
    I = b'i',
    J = b'j',
    K = b'k',
    L = b'l',
    M = b'm',
    N = b'n',
    O = b'o',
    P = b'p',
    Q = b'q',
    R = b'r',
    S = b's',
    T = b't',
    U = b'u',
    V = b'v',
    W = b'w',
    X = b'x',
    Y = b'y',
    Z = b'z',
    N0 = b'0',
    N1 = b'1',
    N2 = b'2',
    N3 = b'3',
    N4 = b'4',
    N5 = b'5',
    N6 = b'6',
    N7 = b'7',
    N8 = b'8',
    N9 = b'9',
    Dot = b'.',
    Star = b'*',
    Space = b' ',
    Minus = b'-',
    Equal = b'=',
    Slash = b'/',
    Comma = b',',
    Backtick = b'`',
    Semicolon = b';',
    Backslash = b'\\',
    SingleQuote = b'\'',
    SquareBracketsOpen = b'[',
    SquareBracketsClosed = b']',
}

use Key::*;
#[link_section = ".rodata"]
/// Conversion table for all characters currently supported by our kernel for PS2 input.
static SCANCODE_TO_KEY: [Option<Key>; 256] = [
    None,
    Some(Escape),
    Some(N1),
    Some(N2),
    Some(N3),
    Some(N4),
    Some(N5),
    Some(N6),
    Some(N7),
    Some(N8),
    Some(N9),
    Some(N0),
    Some(Minus),
    Some(Equal),
    Some(Backspace),
    Some(Tab),
    Some(Q),
    Some(W),
    Some(E),
    Some(R),
    Some(T),
    Some(Y),
    Some(U),
    Some(I),
    Some(O),
    Some(P),
    Some(SquareBracketsOpen),
    Some(SquareBracketsClosed),
    Some(Enter),
    None,
    Some(A),
    Some(S),
    Some(D),
    Some(F),
    Some(G),
    Some(H),
    Some(J),
    Some(K),
    Some(L),
    Some(Semicolon),
    Some(SingleQuote),
    Some(Backtick),
    None,
    Some(Backslash),
    Some(Z),
    Some(X),
    Some(C),
    Some(V),
    Some(B),
    Some(N),
    Some(M),
    Some(Comma),
    Some(Dot),
    Some(Slash),
    None,
    Some(Star),
    None,
    Some(Space),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(ArrowUp),
    None,
    None,
    Some(ArrowLeft),
    None,
    Some(ArrowRight),
    None,
    None,
    Some(ArrowDown),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];
